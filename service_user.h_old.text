#ifndef SERVICE_USER_H
#define SERVICE_USER_H
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "linklist_window_info.h"
#include "queue.h"
#include "sqlist_service.h"
#include "time_service.h"

// 假设分配的号码从 1 开始，递增分配号码
static int current_number = 1; // 记录当前分配的号码

// 函数声明
void get_num();
void finish();
void pause_service();
void resume_service();

void get_num(queue *q, const char *service_type)
{
    char min_num_window_char;        // 保存不同窗口的编号
    lnode *p = get_min_num_window(); // 获取最少排队人数的窗口节点

    /* 这里是为了实现分配功能，所以以10个窗口为例 */
    // 给最少人数的窗口分配编号，避免不同窗口分配的号码相同发生冲突
    if (p)
    {
        // 定义包含十个窗口名称的字符串数组
        const char *window_names[] = {
            "窗口一", "窗口二", "窗口三", "窗口四", "窗口五",
            "窗口六", "窗口七", "窗口八", "窗口九", "窗口十"};

        // 遍历字符串数组，比较窗口名称并分配编号
        for (int i = 0; i < 10; i++)
        {
            if (strcmp(p->data, window_names[i]) == 0)
            {
                min_num_window_char = 'a' + i; // 'a' + 索引位置，获得字符 'a' 到 'j'
                break;                         // 找到对应的窗口名称后，退出循环
            }
        }
    }

    // 分配的号码
    printf("\t分配的号码是：%c%d\n", min_num_window_char, current_number);


    // 分配号码并入队
    enqueue(q, current_number);

    // 号码递增
    current_number++;

    // 更新窗口信息
    update_window_num();
}

// 结束业务并计算办理时间
void finish(queue *q, char *service_type)
{
    // 调用 stop_service_timer 函数结束计时并更新文件
    stop_service_timer(service_type);

    // 打印该业务类型的办理时间
    print_service_times(service_type);

    // 队列操作
    dequeue(q);       // 从队列中取出一个业务编号
    current_number--; // 减少号码，确保下一个业务的号码正确

    // 更新窗口信息
    subtract_window_num(); // 假设这是结束一个窗口后需要调用的函数
}

#endif